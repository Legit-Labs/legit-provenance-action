name: Legit Provenance Generator

permissions:
  contents: read

env:
  GENERATOR_BINARY: /tmp/provenance-generator
  PROVENANCE_NAME: legit-provenance.intoto.jsonl
  PROVENANCE_PATH: /tmp/signed-prov.intoto.jsonl

on:
  workflow_call:
    inputs:
      base64-subjects:
        description: "Artifacts for which to generate provenance, formatted the same as the output of sha256sum (SHA256 NAME\\n[...]) and base64 encoded."
        required: true
        type: string
    secrets:
      api-token:
        required: true
      legit-api-url:
        required: true

jobs:
  # detect-env detects the reusable workflow's repository and ref for use later
  # in the workflow.
  detect-env:
    outputs:
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to detect the current reusable repository and ref.
    steps:
      - name: Detect the generator ref
        uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow@efb47d340c150ce456bf8bd554a131ac53b10ccd

  generator:
    outputs:
      provenance-sha256: ${{ steps.sign-prov.outputs.provenance-sha256 }}
      provenance-name: ${{ steps.sign-prov.outputs.provenance-name }}
    runs-on: ubuntu-latest
    needs: [detect-env]
    permissions:
      id-token: write # Needed to create an OIDC token for keyless signing.
      contents: read
      actions: read # Needed to read workflow info.
    steps:
      - uses: actions/checkout@v3
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
      
      - uses: actions/setup-go@v3
      
      - name: Generate binary
        run: |
          cd cmd/legit_provenance_action && go build -o "${GENERATOR_BINARY}"

      - name: Create and sign provenance
        id: sign-prov
        env:
          GITHUB_CONTEXT: "${{ toJSON(github) }}"
          SUBJECTS: "${{ inputs.base64-subjects }}"
        run: |
          ${GENERATOR_BINARY} -subjects-base64 "${SUBJECTS}" -api-token "${{ secrets.api-token }}" -api-url "${{ secrets.legit-api-url }}" > "${PROVENANCE_PATH}"

      - name: Upload the signed provenance
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # tag=v3.1.0
        with:
          name: "${{ env.PROVENANCE_NAME }}"
          path: "${{ env.PROVENANCE_PATH }}"
          if-no-files-found: error
